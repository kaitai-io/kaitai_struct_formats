<% class_name = "#{file_id}_t" %>

<p>For C++, the easiest way is to <a
    href="https://github.com/kaitai-io/kaitai_struct_cpp_stl_runtime"
    target="_blank" rel="noopener">clone the runtime library sources</a>
and build them along with your project.</p>

<h3>Code</h3>

<p>Using Kaitai Struct in C++/STL usually consists of 3 steps.</p>

<ol>
    <li>We need to create an STL input stream (<code>std::istream</code>). One can open local file for that, or use existing <code>std::string</code> or <code>char*</code> buffer.
        <ul class="nav nav-pills" role="tablist">
            <li role="presentation" class="active"><a href="#example-local-file" role="tab" data-toggle="tab">From local file</a></li>
            <li role="presentation"><a href="#example-std-string" role="tab" data-toggle="tab">From std::string</a></li>
            <li role="presentation"><a href="#example-char-ptr" role="tab" data-toggle="tab">From char*</a></li>
        </ul>
        <div class="tab-content" style="margin-top: 6px">
            <div role="tabpanel" class="tab-pane active" id="example-local-file">
<%= code cur_lang, <<-CODE
#include <fstream>

std::ifstream is("path/to/local/file.#{meta['file-extension'] || meta['id']}", std::ifstream::binary);
CODE
%>
            </div>
            <div role="tabpanel" class="tab-pane" id="example-std-string">
<%= code cur_lang, <<-CODE
#include <sstream>

std::istringstream is(str);
CODE
%>
            </div>
            <div role="tabpanel" class="tab-pane" id="example-char-ptr">
<%= code cur_lang, <<-CODE
#include <sstream>

const char buf[] = { ... };
std::string str(buf, sizeof buf);
std::istringstream is(str);
CODE
%>
            </div>
        </div>

    </li>

    <li>We need to wrap our input stream into Kaitai stream:

<%= code cur_lang, <<-CODE
#include "kaitai/kaitaistream.h"

kaitai::kstream ks(&is);
CODE
%>
    </li>

    <li>And finally, we can invoke the parsing:
<%= code cur_lang, <<-CODE
#{class_name} data(&ks);
CODE
%>
    </li>
</ol>

<p>After that, one can get various attributes from the structure by invoking getter methods like:</p>

<% src_usage_attrs = ""
usage_attrs.each { |attr|
    src_usage_attrs += <<-CODE
data.#{ attr[:name] }() // => #{ attr[:doc] }
    CODE
}
%>
<%= code cur_lang, src_usage_attrs %>
